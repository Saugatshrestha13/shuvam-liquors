{"ast":null,"code":"import { loginFailure, loginStart, loginSuccess, registerFailure, registerStart, registerSuccess } from \"./userRedux\";\nimport { publicRequest } from \"../requestMethods\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const registerUser = async (dispatch, user) => {\n  dispatch(registerStart());\n\n  try {\n    const res = await publicRequest.post(\"/auth/register\", user);\n    dispatch(registerSuccess(res.data));\n  } catch (err) {\n    dispatch(registerFailure());\n  }\n};","map":{"version":3,"sources":["/home/prajilstha/Documents/saugat/shuvam-liquors/client/src/redux/apiCalls.js"],"names":["loginFailure","loginStart","loginSuccess","registerFailure","registerStart","registerSuccess","publicRequest","login","dispatch","user","res","post","data","err","registerUser"],"mappings":"AAAA,SACEA,YADF,EAEEC,UAFF,EAGEC,YAHF,EAIEC,eAJF,EAKEC,aALF,EAMEC,eANF,QAOO,aAPP;AAQA,SAASC,aAAT,QAA8B,mBAA9B;AAEA,OAAO,MAAMC,KAAK,GAAG,OAAOC,QAAP,EAAiBC,IAAjB,KAA0B;AAC7CD,EAAAA,QAAQ,CAACP,UAAU,EAAX,CAAR;;AACA,MAAI;AACF,UAAMS,GAAG,GAAG,MAAMJ,aAAa,CAACK,IAAd,CAAmB,aAAnB,EAAkCF,IAAlC,CAAlB;AACAD,IAAAA,QAAQ,CAACN,YAAY,CAACQ,GAAG,CAACE,IAAL,CAAb,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACR,YAAY,EAAb,CAAR;AACD;AACF,CARM;AAUP,OAAO,MAAMc,YAAY,GAAG,OAAON,QAAP,EAAiBC,IAAjB,KAA0B;AACpDD,EAAAA,QAAQ,CAACJ,aAAa,EAAd,CAAR;;AACA,MAAI;AACF,UAAMM,GAAG,GAAG,MAAMJ,aAAa,CAACK,IAAd,CAAmB,gBAAnB,EAAqCF,IAArC,CAAlB;AACAD,IAAAA,QAAQ,CAACH,eAAe,CAACK,GAAG,CAACE,IAAL,CAAhB,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZL,IAAAA,QAAQ,CAACL,eAAe,EAAhB,CAAR;AACD;AACF,CARM","sourcesContent":["import {\n  loginFailure,\n  loginStart,\n  loginSuccess,\n  registerFailure,\n  registerStart,\n  registerSuccess,\n} from \"./userRedux\";\nimport { publicRequest } from \"../requestMethods\";\n\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n  try {\n    const res = await publicRequest.post(\"/auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\n\nexport const registerUser = async (dispatch, user) => {\n  dispatch(registerStart());\n  try {\n    const res = await publicRequest.post(\"/auth/register\", user);\n    dispatch(registerSuccess(res.data));\n  } catch (err) {\n    dispatch(registerFailure());\n  }\n};\n"]},"metadata":{},"sourceType":"module"}